name: Solar System Workflow

on:
  workflow_dispatch: 
  # push: 
  #   branches: 
  #     - main
  #     - 'feature/*'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017

    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        # exclude:
        #   - nodejs_version: 18
        #     operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup NodeJS Versions - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: nodejs-test
        run: npm test

      - name: Archive Test Result
        ## if: failure() && steps.nodejs-test.outcome == 'failure' || steps.nodejs-test.outcome == 'success'
        # The failure() will fail to run in situations where the previous step is successful
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}
          path: test-results.xml
          retention-days: 1

  code-coverage:
    name: Code Coverage
    container: 
      image: node:18

    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: 
          --name mongo
        # ports:      Not needed since gh allows all between containers
        #   - 27017:27017

    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # - name: Setup NodeJS Versions - 18
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        run: npm run coverage
        continue-on-error: true 

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 1

  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions: 
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Github Container Registry Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:300 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          # echo Testing Image URL using wget
          # wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
  
  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/resuse-deployment.yml
    # secrets: inherit
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-passwd: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: development
      k8s-manifest-dir: kubernetes/development/


  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integrationg Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL output using cURL and JQ
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          echo "-------------------------"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/resuse-deployment.yml
    # secrets: inherit
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-passwd: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Integrationg Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL output using cURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          echo "-------------------------"
          curl https://$URL/live -s -k | jq -r .status | grep -i live
